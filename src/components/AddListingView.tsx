import React, { useState, useRef } from 'react';
import { 
  ArrowLeftIcon,
  CameraIcon,
  XMarkIcon,
  MapPinIcon,
  CurrencyDollarIcon,
  DocumentTextIcon,
  TagIcon,
  PhotoIcon,
  ChevronDownIcon,
  ChevronUpIcon
} from '@heroicons/react/24/outline';
import { useAuth } from '../contexts/AuthContext';
import { useListings } from '../contexts/ListingsContext';
import { useTranslation } from '../hooks/useTranslation';
import { useNavigate } from 'react-router-dom';


// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
interface CustomSelectProps {
  value: string;
  onChange: (value: string) => void;
  options: { value: string; label: string; emoji?: string }[];
  placeholder: string;
  error?: boolean;
  className?: string;
}

const CustomSelect: React.FC<CustomSelectProps> = ({ 
  value, 
  onChange, 
  options, 
  placeholder, 
  error = false,
  className = ""
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const selectedOption = options.find(option => option.value === value);

  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className={`custom-select-container ${className}`} ref={dropdownRef}>
      <button
        type="button"
        className={`custom-select-button ${error ? 'error' : ''}`}
        onClick={() => setIsOpen(!isOpen)}
      >
        <span className="custom-select-text">
          {selectedOption ? (
            <>
              {selectedOption.emoji && <span className="custom-select-emoji">{selectedOption.emoji}</span>}
              {selectedOption.label}
            </>
          ) : (
            placeholder
          )}
        </span>
        {isOpen ? (
          <ChevronUpIcon className="custom-select-chevron" />
        ) : (
          <ChevronDownIcon className="custom-select-chevron" />
        )}
      </button>
      
      {isOpen && (
        <div className="custom-select-dropdown">
          {options.map((option) => (
            <button
              key={option.value}
              type="button"
              className={`custom-select-option ${option.value === value ? 'active' : ''}`}
              onClick={() => {
                onChange(option.value);
                setIsOpen(false);
              }}
            >
              {option.emoji && <span className="custom-select-emoji">{option.emoji}</span>}
              {option.label}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

interface FormData {
  title: string;
  description: string;
  price: string;
  currency: 'EUR' | 'RSD';
  category: string;
  subcategory: string;
  location: string;
  images: File[];
  contactMethod: 'phone' | 'chat';
  delivery?: 'pickup' | 'delivery';
  characteristics: Record<string, string>;
}

const AddListingView: React.FC = () => {
  const { currentUser } = useAuth();
  const { addListing } = useListings();
  const { t } = useTranslation();
  const navigate = useNavigate();
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const MAX_IMAGES = 5;
  const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
  const MIN_DESCRIPTION_LENGTH = 20;
  const MAX_DESCRIPTION_LENGTH = 2000;
  
  const [formData, setFormData] = useState<FormData>({
    title: '',
    description: '',
    price: '',
    currency: 'EUR',
    category: '',
    subcategory: '',
    location: '',
    images: [],
    contactMethod: 'chat',
    characteristics: {}
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const categories = [
    { value: 'electronics', label: t('home.electronics'), emoji: 'üì±' },
    { value: 'home', label: t('home.homeAndGarden'), emoji: 'üè†' },
    { value: 'fashion', label: t('home.fashion'), emoji: 'üëï' },
    { value: 'services', label: t('home.services'), emoji: 'üîß' },
    { value: 'work', label: t('home.work'), emoji: 'üíº' },
    { value: 'real-estate', label: t('home.realEstate'), emoji: 'üè¢' },
    { value: 'plants', label: t('home.plants'), emoji: '‚òÄÔ∏è' },
    { value: 'transport', label: t('home.transport'), emoji: 'üöó' },
    { value: 'sport', label: t('home.sport'), emoji: '‚öΩ' },
    { value: 'books', label: t('home.books'), emoji: 'üìö' },
    { value: 'kids', label: t('home.kids'), emoji: 'üéì' },
    { value: 'furniture', label: t('home.furniture'), emoji: 'ü™ë' },
    { value: 'hobby', label: t('home.hobby'), emoji: 'üé®' },
    { value: 'animals', label: t('home.animals'), emoji: 'üêæ' },
    { value: 'construction', label: t('home.construction'), emoji: 'üî®' },
    { value: 'free', label: t('home.free'), emoji: 'üéÅ' },
    { value: 'other', label: t('home.other'), emoji: 'üì¶' }
  ];

  const cities = [
    "–ë–µ–ª–≥—Ä–∞–¥", "–ù–æ–≤–∏ –°–∞–¥", "–ù–∏—à", "–ö—Ä–∞–≥—É–µ–≤–∞—Ü", "–°—É–±–æ—Ç–∏—Ü–∞",
    "–ó—Ä–µ–Ω—è–Ω–∏–Ω", "–ü–∞–Ω—á–µ–≤–æ", "–ß–∞—á–∞–∫", "–ö—Ä–∞–ª–µ–≤–æ", "–ù–æ–≤–∏ –ü–∞–∑–∞—Ä",
    "–ö—Ä—É—à–µ–≤–∞—Ü", "–£–∂–∏—Ü–µ", "–í—Ä–∞–Ω–µ", "–®–∞–±–∞—Ü", "–°–æ–º–±–æ—Ä",
    "–ü–æ–∂–∞—Ä–µ–≤–∞—Ü", "–°–º–µ–¥–µ—Ä–µ–≤–æ", "–õ–µ—Å–∫–æ–≤–∞—Ü", "–í–∞–ª–µ–≤–æ", "–ö–∏–∫–∏–Ω–¥–∞",
    "–í—Ä—à–∞—Ü", "–ë–æ—Ä", "–ü—Ä–æ–∫—É–ø–ª–µ", "–°—Ä–µ–º—Å–∫–∞ –ú–∏—Ç—Ä–æ–≤–∏—Ü–∞", "–Ø–≥–æ–¥–∏–Ω–∞",
    "–õ–æ–∑–Ω–∏—Ü–∞", "–ü—Ä–∏–µ–ø–æ–ª–µ", "–ü–∏—Ä–æ—Ç", "–ó–ª–∞—Ç–∏–±–æ—Ä", "–ö–æ–ø–∞–æ–Ω–∏–∫"
  ];

  const subcategories = {
    work: [
      { value: 'vacancies', label: t('home.vacancies'), emoji: 'üë•' },
      { value: 'resume', label: t('home.resume'), emoji: 'üíº' }
    ],
    'real-estate': [
      { value: 'rent', label: t('home.rent'), emoji: 'üè†' },
      { value: 'sale', label: t('home.sale'), emoji: 'üè¢' }
    ]
  };

  // –¢–∏–ø—ã –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  type CharacteristicField = {
    key: string;
    label: string;
    type: 'text' | 'number' | 'select';
    options?: string[];
  };

  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryCharacteristics: Record<string, CharacteristicField[]> = {
    electronics: [
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' },
      { key: 'model', label: t('listings.characteristicModel'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'warranty', label: t('listings.characteristicWarranty'), type: 'select', options: [t('listings.warrantyYes'), t('listings.warrantyNo'), t('listings.warrantyExpired')] },
      { key: 'year', label: t('listings.characteristicYear'), type: 'number' }
    ],
    home: [
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'material', label: t('listings.characteristicMaterial'), type: 'text' },
      { key: 'dimensions', label: t('listings.characteristicDimensions'), type: 'text' },
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' }
    ],
    fashion: [
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' },
      { key: 'size', label: t('listings.characteristicSize'), type: 'text' },
      { key: 'material', label: t('listings.characteristicMaterial'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'color', label: t('listings.characteristicColor'), type: 'text' }
    ],
    services: [
      { key: 'serviceType', label: t('listings.characteristicServiceType'), type: 'text' },
      { key: 'experience', label: t('listings.characteristicExperience'), type: 'text' },
      { key: 'location', label: t('listings.location'), type: 'text' },
      { key: 'schedule', label: t('listings.characteristicSchedule'), type: 'text' }
    ],
    plants: [
      { key: 'plantType', label: t('listings.characteristicPlantType'), type: 'text' },
      { key: 'age', label: t('listings.characteristicAge'), type: 'text' },
      { key: 'height', label: t('listings.characteristicHeight'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionExcellent'), t('listings.conditionGood'), t('listings.conditionFair')] }
    ],
    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    vacancies: [
      { key: 'position', label: t('listings.characteristicPosition'), type: 'text' },
      { key: 'salary', label: t('listings.characteristicSalary'), type: 'text' },
      { key: 'experience', label: t('listings.characteristicExperience'), type: 'text' },
      { key: 'schedule', label: t('listings.characteristicSchedule'), type: 'text' },
      { key: 'location', label: t('listings.location'), type: 'text' }
    ],
    resume: [
      { key: 'position', label: t('listings.characteristicPosition'), type: 'text' },
      { key: 'experience', label: t('listings.characteristicExperience'), type: 'text' },
      { key: 'education', label: t('listings.characteristicEducation'), type: 'text' },
      { key: 'skills', label: t('listings.characteristicSkills'), type: 'text' }
    ],
    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    rent: [
      { key: 'propertyType', label: t('listings.characteristicPropertyType'), type: 'select', options: [t('listings.propertyTypeApartment'), t('listings.propertyTypeHouse'), t('listings.propertyTypeCommercial'), t('listings.propertyTypeLand')] },
      { key: 'rooms', label: t('listings.characteristicRooms'), type: 'number' },
      { key: 'area', label: t('listings.characteristicArea'), type: 'number' },
      { key: 'floor', label: t('listings.characteristicFloor'), type: 'number' },
      { key: 'rentPeriod', label: t('listings.characteristicRentPeriod'), type: 'text' }
    ],
    sale: [
      { key: 'propertyType', label: t('listings.characteristicPropertyType'), type: 'select', options: [t('listings.propertyTypeApartment'), t('listings.propertyTypeHouse'), t('listings.propertyTypeCommercial'), t('listings.propertyTypeLand')] },
      { key: 'rooms', label: t('listings.characteristicRooms'), type: 'number' },
      { key: 'area', label: t('listings.characteristicArea'), type: 'number' },
      { key: 'floor', label: t('listings.characteristicFloor'), type: 'number' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionExcellent'), t('listings.conditionGood'), t('listings.conditionNeedsRepair')] }
    ],
    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    transport: [
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' },
      { key: 'model', label: t('listings.characteristicModel'), type: 'text' },
      { key: 'year', label: t('listings.characteristicYear'), type: 'number' },
      { key: 'mileage', label: t('listings.characteristicMileage'), type: 'number' },
      { key: 'fuelType', label: t('listings.characteristicFuelType'), type: 'select', options: [t('listings.fuelTypePetrol'), t('listings.fuelTypeDiesel'), t('listings.fuelTypeElectric'), t('listings.fuelTypeHybrid')] },
      { key: 'transmission', label: t('listings.characteristicTransmission'), type: 'select', options: [t('listings.transmissionManual'), t('listings.transmissionAutomatic'), t('listings.transmissionRobot'), t('listings.transmissionCVT')] }
    ],
    sport: [
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'size', label: t('listings.characteristicSize'), type: 'text' },
      { key: 'material', label: t('listings.characteristicMaterial'), type: 'text' }
    ],
    books: [
      { key: 'author', label: t('listings.characteristicAuthor'), type: 'text' },
      { key: 'publisher', label: t('listings.characteristicPublisher'), type: 'text' },
      { key: 'year', label: t('listings.characteristicYear'), type: 'number' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionExcellent'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'language', label: t('listings.characteristicLanguage'), type: 'text' }
    ],
    kids: [
      { key: 'ageGroup', label: t('listings.characteristicAgeGroup'), type: 'text' },
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'material', label: t('listings.characteristicMaterial'), type: 'text' }
    ],
    furniture: [
      { key: 'material', label: t('listings.characteristicMaterial'), type: 'text' },
      { key: 'dimensions', label: t('listings.characteristicDimensions'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'style', label: t('listings.characteristicStyle'), type: 'text' }
    ],
    hobby: [
      { key: 'hobbyType', label: t('listings.characteristicHobbyType'), type: 'text' },
      { key: 'brand', label: t('listings.characteristicBrand'), type: 'text' },
      { key: 'condition', label: t('listings.characteristicCondition'), type: 'select', options: [t('listings.conditionNew'), t('listings.conditionLikeNew'), t('listings.conditionGood'), t('listings.conditionFair')] },
      { key: 'material', label: t('listings.characteristicMaterial'), type: 'text' }
    ]
  };

  const handleInputChange = (field: keyof FormData, value: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞
    if (field === 'contactMethod' && value === 'phone' && currentUser && !currentUser.phone) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —á–∞—Ç
      setFormData(prev => ({ ...prev, [field]: 'chat' }));
      alert(t('listings.fillPhoneInProfile'));
      return;
    }
    
    setFormData(prev => ({ ...prev, [field]: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  const handleCharacteristicChange = (key: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      characteristics: {
        ...prev.characteristics,
        [key]: value
      }
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if (errors[`characteristic_${key}`]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[`characteristic_${key}`];
        return newErrors;
      });
    }
  };

  const clearCharacteristicErrors = () => {
    setErrors(prev => {
      const newErrors = { ...prev };
      Object.keys(newErrors).forEach(key => {
        if (key.startsWith('characteristic_')) {
          delete newErrors[key];
        }
      });
      return newErrors;
    });
  };

  const handleCategoryChange = (category: string) => {
    setFormData(prev => ({ 
      ...prev, 
      category,
      subcategory: '',
      characteristics: {}, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      ...((category === 'work' || category === 'real-estate') && { delivery: undefined }) // –£–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π "–†–∞–±–æ—Ç–∞" –∏ "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    clearCharacteristicErrors();
  };

  const handleSubcategoryChange = (subcategory: string) => {
    setFormData(prev => ({ 
      ...prev, 
      subcategory,
      characteristics: {} // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    clearCharacteristicErrors();
  };

  const handleImagesChange = (images: File[]) => {
    setFormData(prev => ({ ...prev, images }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors.images) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors.images;
        return newErrors;
      });
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    const validFiles = files.filter(file => {
      const isValidType = file.type === 'image/jpeg' || file.type === 'image/jpg' || file.type === 'image/png';
      const isValidSize = file.size <= MAX_FILE_SIZE; // 5MB
      
      if (!isValidType) {
        alert(t('profile.fileTypeError'));
        return false;
      }
      
      if (!isValidSize) {
        alert(t('profile.fileSizeLimit'));
        return false;
      }
      
      return true;
    });

    if (formData.images.length + validFiles.length > MAX_IMAGES) {
      alert(t('listings.maxPhotoCount'));
      return;
    }

    const newImages = [...formData.images, ...validFiles];
    handleImagesChange(newImages);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    validFiles.forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreviewUrls(prev => [...prev, e.target?.result as string]);
      };
      reader.onerror = () => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', file.name);
        alert(t('profile.fileReadError') || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
      };
      reader.readAsDataURL(file);
    });
  };

  const removeImage = (index: number) => {
    const newImages = formData.images.filter((_, i) => i !== index);
    const newPreviewUrls = imagePreviewUrls.filter((_, i) => i !== index);
    
    handleImagesChange(newImages);
    setImagePreviewUrls(newPreviewUrls);
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = t('listings.enterTitle');
    }

    if (!formData.description.trim()) {
      newErrors.description = t('listings.enterDescription');
    } else if (formData.description.length < MIN_DESCRIPTION_LENGTH) {
      newErrors.description = t('validation.minLength') + ' ' + MIN_DESCRIPTION_LENGTH;
    }

    if (!formData.price.trim()) {
      newErrors.price = t('listings.enterPrice');
    }

    if (!formData.category) {
      newErrors.category = t('validation.selectCategory');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (formData.category && subcategories[formData.category as keyof typeof subcategories] && !formData.subcategory) {
      newErrors.subcategory = t('validation.selectSubcategory');
    }

    if (!formData.location.trim()) {
      newErrors.location = t('validation.enterLocation');
    }

    if (!formData.contactMethod) {
      newErrors.contactMethod = t('validation.selectContactMethod');
    } else if (formData.contactMethod === 'phone' && currentUser && !currentUser.phone) {
      newErrors.contactMethod = t('listings.fillPhoneInProfile');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≥–¥–µ –æ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if (formData.category !== 'work' && formData.category !== 'real-estate' && !formData.delivery) {
      newErrors.delivery = t('validation.selectDeliveryMethod') || '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      const newListing: any = {
        title: formData.title,
        description: formData.description,
        price: formData.price,
        currency: formData.currency,
        category: formData.subcategory || formData.category, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        city: formData.location,
        sellerName: currentUser?.name || currentUser?.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        isCompany: currentUser?.isCompany || false,
        imageName: formData.images.length > 0 ? 'user-upload' : '',
        userId: currentUser?.id || 'anonymous',
        characteristics: formData.characteristics,
        contactMethod: formData.contactMethod
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≥–¥–µ —ç—Ç–æ –ª–æ–≥–∏—á–Ω–æ
      if (formData.category !== 'work' && formData.category !== 'real-estate') {
        newListing.delivery = formData.delivery;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      addListing(newListing);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—Ö–∞
      setShowSuccessModal(true);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      alert(t('listings.errorCreatingListing'));
    } finally {
      setIsSubmitting(false);
    }
  };


  return (
    <div className="add-listing-container">
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="add-listing-header">
        <button 
          onClick={() => window.history.back()}
          className="back-button"
        >
          <ArrowLeftIcon className="back-icon" />
          <span>{t('common.back')}</span>
        </button>
        <h1 className="add-listing-title">{t('listings.createListing')}</h1>
        <div style={{ width: '80px' }}></div> {/* –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
      </div>

      <form onSubmit={handleSubmit} className="add-listing-form">
        {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
        <div className="form-section">
          <label className="form-label">
            <PhotoIcon className="label-icon" />
            {t('listings.photosRequired')}
          </label>
          <div className="image-upload-area">
            <div className="image-grid">
              {imagePreviewUrls.map((url, index) => (
                <div key={index} className="image-preview">
                  <img src={url} alt={`${t('favorites.previewImage')} ${index + 1}`} />
                  <button
                    type="button"
                    onClick={() => removeImage(index)}
                    className="remove-image-button"
                  >
                    <XMarkIcon className="remove-icon" />
                  </button>
                </div>
              ))}
              
              {formData.images.length < MAX_IMAGES && (
                <div 
                  className="image-upload-placeholder"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <CameraIcon className="upload-icon" />
                  <span>{t('listings.addPhotoText')}</span>
                  <small>{String(formData.images.length)}/{MAX_IMAGES}</small>
                </div>
              )}
            </div>
            
            <input
              ref={fileInputRef}
              type="file"
              multiple
              accept="image/jpeg,image/jpg,image/png"
              onChange={handleImageUpload}
              style={{ display: 'none' }}
            />
            

            
            <div className="upload-hint">
              <p>{t('listings.photoOptionalNote')}</p>
              <p>{t('listings.maxPhotoCount')}</p>
              <p>{t('listings.maxFileSizeNote')}</p>
              <p>{t('listings.supportedFormatsNote')}</p>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="form-section">
          <label className="form-label">
            <DocumentTextIcon className="label-icon" />
                          {t('listings.title')} *
          </label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
                          placeholder={t('listings.title')}
            className={`form-input ${errors.title ? 'input-error' : ''}`}
          />
          {errors.title && (
            <div className="error-message">{errors.title}</div>
          )}
        </div>

        <div className="form-section">
                      <label className="form-label">
              <DocumentTextIcon className="label-icon" />
              {t('listings.description')} *
            </label>
          <textarea
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder={t('listings.description')}
            className={`form-textarea ${errors.description ? 'input-error' : ''}`}
            rows={6}
            maxLength={MAX_DESCRIPTION_LENGTH}
          />
          {errors.description && (
            <div className="error-message">{errors.description}</div>
          )}
          <div className="char-counter">
            {formData.description.length}/{MAX_DESCRIPTION_LENGTH}
          </div>
        </div>

        {/* –¶–µ–Ω–∞, –≤–∞–ª—é—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
        <div className="form-row">
          <div className="form-section">
            <label className="form-label">
              <CurrencyDollarIcon className="label-icon" />
              {formData.category === 'work' || formData.subcategory === 'vacancies' ? '–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –º–µ—Å—è—Ü' : 
               formData.subcategory === 'rent' ? '–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü' : 
               t('listings.price')} *
            </label>
            <input
              type="text"
              value={formData.price}
              onChange={(e) => handleInputChange('price', e.target.value)}
              placeholder="0"
              className={`form-input ${errors.price ? 'input-error' : ''}`}
            />
            {errors.price && (
              <div className="error-message">{errors.price}</div>
            )}
          </div>

          <div className="form-section">
            <label className="form-label">
              <CurrencyDollarIcon className="label-icon" />
              {t('listings.currency')}
            </label>
            <CustomSelect
              value={formData.currency}
              onChange={(value) => handleInputChange('currency', value as 'EUR' | 'RSD')}
              options={[
                { value: 'EUR', label: 'EUR' },
                { value: 'RSD', label: 'RSD' }
              ]}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É"
              className="currency-select"
            />
          </div>

          <div className="form-section">
            <label className="form-label">
              <TagIcon className="label-icon" />
              {t('listings.category')} *
            </label>
            <CustomSelect
              value={formData.category}
              onChange={handleCategoryChange}
              options={[{ value: '', label: t('listings.selectCategory') }, ...categories]}
              placeholder={t('listings.selectCategory')}
              error={!!errors.category}
            />
            {errors.category && (
              <div className="error-message">{errors.category}</div>
            )}
          </div>
        </div>

        {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        {formData.category && subcategories[formData.category as keyof typeof subcategories] && (
          <div className="form-section">
            <label className="form-label">
              <TagIcon className="label-icon" />
              {t('listings.subcategory')} *
            </label>
            <CustomSelect
              value={formData.subcategory}
              onChange={handleSubcategoryChange}
              options={[{ value: '', label: t('validation.selectSubcategory') }, ...(subcategories[formData.category as keyof typeof subcategories] || [])]}
              placeholder={t('validation.selectSubcategory')}
              error={!!errors.subcategory}
            />
            {errors.subcategory && (
              <div className="error-message">{errors.subcategory}</div>
            )}
          </div>
        )}

        {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        {(formData.category && categoryCharacteristics[formData.category as keyof typeof categoryCharacteristics]) ||
         (formData.subcategory && categoryCharacteristics[formData.subcategory as keyof typeof categoryCharacteristics]) ? (
          <div className="form-section">
            <label className="form-label">
              <DocumentTextIcon className="label-icon" />
              {t('listings.characteristics')}
            </label>
            <div className="characteristics-grid">
              {(formData.subcategory && categoryCharacteristics[formData.subcategory as keyof typeof categoryCharacteristics] 
                ? categoryCharacteristics[formData.subcategory as keyof typeof categoryCharacteristics]
                : categoryCharacteristics[formData.category as keyof typeof categoryCharacteristics]
              ).map(char => (
                <div key={char.key} className="characteristic-field">
                  <label className="characteristic-label">{char.label}</label>
                  {char.type === 'select' ? (
                    <select
                      value={formData.characteristics[char.key] || ''}
                      onChange={(e) => handleCharacteristicChange(char.key, e.target.value)}
                      className="characteristic-select"
                    >
                      <option value="">{t('listings.selectCharacteristic')} {char.label.toLowerCase()}</option>
                      {char.options?.map((option: string) => (
                        <option key={option} value={option}>{option}</option>
                      ))}
                    </select>
                  ) : (
                    <input
                      type={char.type}
                      value={formData.characteristics[char.key] || ''}
                      onChange={(e) => handleCharacteristicChange(char.key, e.target.value)}
                      placeholder={`${t('listings.enterCharacteristic')} ${char.label.toLowerCase()}`}
                      className="characteristic-input"
                    />
                  )}
                </div>
              ))}
            </div>
          </div>
        ) : null}

        {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
        <div className="form-section">
          <label className="form-label">
            <MapPinIcon className="label-icon" />
            {t('listings.location')} *
          </label>
                      <CustomSelect
              value={formData.location}
              onChange={(value) => handleInputChange('location', value)}
              options={[{ value: '', label: t('listings.selectCity') }, ...cities.map(city => ({ value: city, label: city }))]}
              placeholder={t('listings.selectCity')}
              error={!!errors.location}
            />
          {errors.location && (
            <div className="error-message">{errors.location}</div>
          )}
        </div>

        {/* –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ */}
        <div className="form-section">
          <label className="form-label">{t('listings.contactMethod')} *</label>
          <div className="contact-method-buttons">
            <button
              type="button"
              className={`contact-method-button ${formData.contactMethod === 'phone' ? 'active' : ''} ${currentUser && !currentUser.phone ? 'disabled' : ''}`}
              onClick={() => currentUser && currentUser.phone ? handleInputChange('contactMethod', 'phone') : null}
              disabled={!currentUser || !currentUser.phone}
            >
              <span className="method-text">{t('listings.phone')}</span>
              <span className="method-hint">
                {currentUser && currentUser.phone ? `${t('listings.fromProfile')} ${currentUser.phone}` : t('listings.fillPhoneInProfile')}
              </span>
            </button>
            <button
              type="button"
              className={`contact-method-button ${formData.contactMethod === 'chat' ? 'active' : ''}`}
              onClick={() => handleInputChange('contactMethod', 'chat')}
            >
              <span className="method-text">{t('listings.chat')}</span>
              <span className="method-hint">Email: {currentUser?.email}</span>
            </button>
          </div>
          {errors.contactMethod && (
            <div className="error-message">{errors.contactMethod}</div>
          )}
        </div>

        {/* –î–æ—Å—Ç–∞–≤–∫–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π "–†–∞–±–æ—Ç–∞" –∏ "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" */}
        {formData.category !== 'work' && formData.category !== 'real-estate' && (
          <div className="form-section">
            <label className="form-label">{t('listings.deliveryMethod')} *</label>
            <div className="delivery-buttons">
              <button
                type="button"
                className={`delivery-button ${formData.delivery === 'pickup' ? 'active' : ''}`}
                onClick={() => handleInputChange('delivery', 'pickup')}
              >
                <span className="delivery-text">{t('listings.pickup')}</span>
                <span className="delivery-hint">{t('listings.buyerWillPickup')}</span>
              </button>
              <button
                type="button"
                className={`delivery-button ${formData.delivery === 'delivery' ? 'active' : ''}`}
                onClick={() => handleInputChange('delivery', 'delivery')}
              >
                <span className="delivery-text">{t('listings.delivery')}</span>
                <span className="delivery-hint">{t('listings.sellerWillDeliver')}</span>
              </button>
            </div>
            {errors.delivery && (
              <div className="error-message">{errors.delivery}</div>
            )}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <div className="form-actions">
          <button
            type="submit"
            disabled={isSubmitting}
            className="submit-button"
          >
            {isSubmitting ? t('common.loading') : t('listings.createListing')}
          </button>
        </div>
      </form>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è */}
      {showSuccessModal && (
        <div className="modal-overlay" onClick={() => setShowSuccessModal(false)}>
          <div className="modal-content success-modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="success-modal-header">
              <div className="success-icon">‚úÖ</div>
              <h3 className="success-modal-title">{t('listings.listingCreatedSuccess')}</h3>
            </div>
            
            <div className="success-modal-body">
              <p className="success-modal-description">
                –¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
              </p>
            </div>
            
            <div className="success-modal-actions">
              <button 
                className="success-modal-button primary"
                onClick={() => {
                  setShowSuccessModal(false);
                  navigate('/my-listings');
                }}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–æ–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
              </button>
              <button 
                className="success-modal-button secondary"
                onClick={() => {
                  setShowSuccessModal(false);
                  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
                  setFormData({
                    title: '',
                    description: '',
                    price: '',
                    currency: 'EUR',
                    category: '',
                    subcategory: '',
                    location: '',
                    contactMethod: 'chat',
                    delivery: 'pickup',
                    images: [],
                    characteristics: {}
                  });
                  setImagePreviewUrls([]);
                  setErrors({});
                }}
              >
                –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AddListingView; 